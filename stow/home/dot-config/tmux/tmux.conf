set  -g default-terminal "screen-256color"
set  -g base-index      1
setw -g pane-base-index 1

new-session

set -g status-keys vi
set -g mode-keys   vi

# rebind main key: M-b
unbind C-b
set -g prefix M-b
bind -N "Send the prefix key through to the application" \
  M-b send-prefix

set  -g mouse             on
setw -g aggressive-resize off
set  -s escape-time       50
set  -g history-limit     2000

set -sa terminal-overrides ",xterm*:Tc"

set -g allow-passthrough on
set -ga update-environment TERM
set -ga update-environment TERM_PROGRAM

# theme
set -g status-position top
set -g status-style bg=default
set -g status-justify absolute-centre
set -g window-status-format "#[fg=#a6adc8] #{b:pane_current_path} "
set -g window-status-separator ""
set -g window-status-current-format "#[fg=#313244,bg=default]#[fg=#89dceb,bg=#313244,bold]#{b:pane_current_path}#[fg=#313244,bg=default]"
set -g status-left "#[fg=#fab387]#{pane_current_path}"
set -g status-right "#[fg=#89dceb]#{session_name}  "
set -g status-left-length 65
set -g pane-active-border-style fg=#89dceb
set -g pane-border-style fg=#6c7086
set -g message-style fg=#fab387,bg=default
set -g message-command-style fg=#fab387,bg=default

bind -n M-F5 source-file ~/.config/tmux/tmux.conf \; display "Reloaded!"

# Tmux only bindings
bind -n M-n new-window -c "#{pane_current_path}"
bind -n M-q confirm-before -p "kill-window #W? (y/n)" kill-pane
bind q confirm-before -p "kill-server #W? (y/n)" kill-server

bind -n M-h split-window -h -c "#{pane_current_path}"
bind -n M-v split-window -v -c "#{pane_current_path}"

bind -n M-C-PgUp previous-window
bind -n M-C-PgDn next-window

bind -n M-C-S-PgUp switch-client -p
bind -n M-C-S-PgDn switch-client -n

bind -r S-Up swap-pane -U
bind -r S-Down swap-pane -D

bind -n M-s display-popup -E "$EDITOR /tmp/scratchpad.md"
bind -n M-m display-popup -w 80% -h 80% -E "nvim '$HOME/Extended Mind/context.md'"
bind -n M-g display-popup -w 80% -h 80% -d "#{pane_current_path}" -E "lazygit"
bind -n M-t display-popup -d "#{pane_current_path}" -E "fish"

# Vim pass through
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?\.?(view|n?vim?x?)(-wrapped)?(diff)?$'"

# Navigation
bind -n "M-Left" if-shell "$is_vim" "send-keys M-Left" { if -F "#{pane_at_left}" "" "select-pane -L" }
bind -n "M-Down" if-shell "$is_vim" "send-keys M-Down" { if -F "#{pane_at_bottom}" "" "select-pane -D" }
bind -n "M-Up" if-shell "$is_vim" "send-keys M-Up" { if -F "#{pane_at_top}" "" "select-pane -U" }
bind -n "M-Right" if-shell "$is_vim" "send-keys M-Right" { if -F "#{pane_at_right}" "" "select-pane -R" }

bind -T copy-mode-vi "M-Left" if -F "#{pane_at_left}" "" "select-pane -L"
bind -T copy-mode-vi "M-Down" if -F "#{pane_at_bottom}" "" "select-pane -D"
bind -T copy-mode-vi "M-Up" if -F "#{pane_at_top}" "" "select-pane -U"
bind -T copy-mode-vi "M-Right" if -F "#{pane_at_right}" "" "select-pane -R"

# Resize
bind -n "M-C-Left" if-shell "$is_vim" "send-keys M-C-Left" "resize-pane -L 5"
bind -n "M-C-Down" if-shell "$is_vim" "send-keys M-C-Down" "resize-pane -D 5"
bind -n "M-C-Up" if-shell "$is_vim" "send-keys M-C-Up" "resize-pane -U 5"
bind -n "M-C-Right" if-shell "$is_vim" "send-keys M-C-Right" "resize-pane -R 5"

bind -T copy-mode-vi M-C-Left resize-pane -L 1
bind -T copy-mode-vi M-C-Down resize-pane -D 1
bind -T copy-mode-vi M-C-Up resize-pane -U 1
bind -T copy-mode-vi M-C-Right resize-pane -R 1
